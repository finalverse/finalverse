// File: crates/core/src/models/events.rs
// Path: finalverse/crates/core/src/models/events.rs
// Description: Event system models for all game events, from player actions to world changes.
//              These events drive the reactive nature of the Finalverse.

use serde::{Deserialize, Serialize};
use uuid::Uuid;
use chrono::{DateTime, Utc};
use nalgebra::Vector3;
use std::collections::HashMap;

/// Base event trait that all events must implement
pub trait Event: Send + Sync {
    fn event_id(&self) -> Uuid;
    fn timestamp(&self) -> DateTime<Utc>;
    fn event_type(&self) -> EventType;
}

/// Categories of events in the system
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum EventType {
    Player,
    World,
    Region,
    Entity,
    System,
    Narrative,
    Audio,
}

/// Player-initiated actions
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum PlayerAction {
    Movement {
        player_id: Uuid,
        from: Vector3<f32>,
        to: Vector3<f32>,
        timestamp: DateTime<Utc>,
    },

    UseAbility {
        player_id: Uuid,
        ability_id: String,
        target: AbilityTarget,
        power_level: f32,
        timestamp: DateTime<Utc>,
    },

    Interact {
        player_id: Uuid,
        target_entity: Uuid,
        interaction_type: InteractionType,
        timestamp: DateTime<Utc>,
    },

    CompleteQuest {
        player_id: Uuid,
        quest_id: Uuid,
        choices_made: Vec<String>,
        timestamp: DateTime<Utc>,
    },

    Songweaving {
        player_id: Uuid,
        melody: Vec<Note>,
        target_area: Vector3<f32>,
        harmony_type: HarmonyType,
        timestamp: DateTime<Utc>,
    },

    Build {
        player_id: Uuid,
        structure_type: String,
        position: Vector3<f32>,
        materials_used: HashMap<String, u32>,
        timestamp: DateTime<Utc>,
    },
}

/// Semantic events generated by the Observer
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum SemanticEvent {
    HarmonyRestored {
        player_id: Uuid,
        amount: f32,
        location: Vector3<f32>,
        affected_radius: f32,
    },

    DiscordIntroduced {
        source: EventSource,
        amount: f32,
        location: Vector3<f32>,
        spreading_rate: f32,
    },

    LegendCreated {
        player_id: Uuid,
        deed: String,
        witnesses: Vec<Uuid>,
        world_impact: f32,
    },

    RelationshipChanged {
        entity_a: Uuid,
        entity_b: Uuid,
        change_type: RelationshipChange,
        new_level: f32,
    },

    EchoAwakened {
        echo_type: EchoType,
        awakener: Uuid,
        location: Vector3<f32>,
    },

    SongweavingResonance {
        player_id: Uuid,
        melody_quality: f32,
        world_harmony: f32,
        created_effects: Vec<WorldEffect>,
    },
}

/// World-level events
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum WorldEvent {
    MetabolismTick {
        world_id: Uuid,
        regions_affected: Vec<Uuid>,
        harmony_changes: HashMap<Uuid, f32>,
        discord_changes: HashMap<Uuid, f32>,
    },

    CelestialEvent {
        event_type: CelestialEventType,
        affected_regions: Vec<Uuid>,
        duration: i64, // seconds
        intensity: f32,
    },

    SilenceExpansion {
        epicenter: Vector3<f32>,
        current_radius: f32,
        expansion_rate: f32,
        severity: f32,
    },

    WorldSymphony {
        symphony_type: String,
        participating_players: Vec<Uuid>,
        success_level: f32,
        permanent_changes: Vec<PermanentWorldChange>,
    },
}

/// Region-specific events
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum RegionEvent {
    BiomeShift {
        region_id: Uuid,
        from_biome: BiomeType,
        to_biome: BiomeType,
        transition_duration: i64,
    },

    CreatureMigration {
        species: String,
        from_region: Uuid,
        to_region: Uuid,
        population_size: u32,
        reason: MigrationReason,
    },

    ResourceBloom {
        region_id: Uuid,
        resource_type: String,
        abundance_multiplier: f32,
        duration: i64,
    },

    NarrativeEvent {
        region_id: Uuid,
        event_chain: String,
        participants: Vec<Uuid>,
        choices_available: Vec<NarrativeChoice>,
    },
}

/// Metabolism events that trigger world changes
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum MetabolismEvent {
    CelestialBloom {
        region_id: Uuid,
        intensity: f32,
        bloom_points: Vec<Vector3<f32>>,
    },

    SilenceRift {
        region_id: Uuid,
        severity: f32,
        rift_location: Vector3<f32>,
    },

    HarmonyWave {
        origin: Vector3<f32>,
        wave_strength: f32,
        propagation_speed: f32,
    },

    RegionDecay {
        region_id: Uuid,
        decay_rate: f32,
        decay_type: DecayType,
    },
}

/// Effects that can be applied to the world
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum WorldEffect {
    RestoreColor {
        center: Vector3<f32>,
        radius: f32,
        intensity: f32,
        color_palette: Vec<Color>,
    },

    SpawnEntity {
        entity_template: String,
        position: Vector3<f32>,
        quantity: u32,
        lifetime: Option<i64>,
    },

    TerrainTransformation {
        area: BoundingBox,
        transformation_type: TerrainTransformType,
        intensity: f32,
    },

    CreateHarmonyField {
        center: Vector3<f32>,
        radius: f32,
        strength: f32,
        duration: i64,
    },

    EnvironmentalChange {
        change_type: EnvironmentChangeType,
        affected_area: BoundingBox,
        gradual: bool,
        duration: i64,
    },
}

/// Event metadata for tracking and replay
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventMetadata {
    pub event_id: Uuid,
    pub timestamp: DateTime<Utc>,
    pub source: EventSource,
    pub priority: EventPriority,
    pub tags: Vec<String>,
    pub correlated_events: Vec<Uuid>,
}

/// Source of an event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum EventSource {
    Player(Uuid),
    NPC(Uuid),
    System,
    WorldEngine,
    AIDirector,
    Echo(EchoType),
}

/// Event priority for processing order
#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq, Eq, PartialOrd, Ord)]
pub enum EventPriority {
    Low = 0,
    Normal = 1,
    High = 2,
    Critical = 3,
}

/// Supporting enumerations
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum InteractionType {
    Talk,
    Trade,
    Gift,
    Quest,
    Teach,
    Learn,
    Collaborate,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum HarmonyType {
    Restoration,
    Creation,
    Protection,
    Connection,
    Transformation,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum EchoType {
    Lumi,  // Hope & Discovery
    KAI,   // Logic & Understanding
    Terra, // Resilience & Growth
    Ignis, // Courage & Creation
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}

impl Color {
    pub fn new(r: f32, g: f32, b: f32, a: f32) -> Self {
        Self { r, g, b, a }
    }
}