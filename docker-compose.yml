# docker-compose.yml
# version: '3.8'

services:
  # Data Layer
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: finalverse
      POSTGRES_USER: finalverse
      POSTGRES_PASSWORD: finalverse_secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finalverse"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Vector database for AI embeddings
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334

  # MinIO for object storage (S3 compatible)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API Gateway (using Envoy)
  api-gateway:
    image: envoyproxy/envoy:v1.28-latest
    ports:
      - "8080:8080"
      - "9901:9901"
    volumes:
      - ./config/envoy.yaml:/etc/envoy/envoy.yaml
    command: ["-c", "/etc/envoy/envoy.yaml"]
    depends_on:
      - song-engine
      - world-engine
      - echo-engine
      - ai-orchestra

  # Core Services (would be built from Rust source in production)
  song-engine:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE: song-engine
    ports:
      - "3001:3001"
    environment:
      DATABASE_URL: postgres://finalverse:finalverse_secret@postgres:5432/finalverse
      REDIS_URL: redis://redis:6379
      RUST_LOG: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  world-engine:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE: world-engine
    ports:
      - "3002:3002"
    environment:
      DATABASE_URL: postgres://finalverse:finalverse_secret@postgres:5432/finalverse
      REDIS_URL: redis://redis:6379
      RUST_LOG: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  echo-engine:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE: echo-engine
    ports:
      - "3003:3003"
    environment:
      DATABASE_URL: postgres://finalverse:finalverse_secret@postgres:5432/finalverse
      REDIS_URL: redis://redis:6379
      RUST_LOG: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  ai-orchestra:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE: ai-orchestra
    ports:
      - "3004:3004"
    environment:
      DATABASE_URL: postgres://finalverse:finalverse_secret@postgres:5432/finalverse
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      RUST_LOG: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  minio_data: